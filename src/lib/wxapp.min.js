'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const WxProxy = {};

function wrap(key) {
    return function (options = {}) {
        return new Promise(function (resolve, reject) {
            options.success = resolve;
            options.fail = function (res) {
                reject({
                    code: 'wxfail',
                    error: res
                });
            };
            wx[key](options);
        })
    }
}

function wrapSync(key) {
    return function (options) {
        return wx[key](options)
    }
}

for (let key in wx) {
    WxProxy[key] = key.endsWith('Sync') ? wrapSync(key) : wrap(key);
}



// WxProxy.request(options).then(res => {
//     console.log('success')
// }).catch(res => {
//     console.log('fail')
// }).then(res => {
//     console.log('complete')
// })

var Util = {

    // 日期处理
    normalizeDate,
    formatTime,
    formatDate,
    formatNumber,
    addDay,
    addMonth,
    dateDiff,
    during,
    getWeekday,

    // 表单验证
    validateIdCardNo,
    validateEmail,
    validateFlight,
    validatePhone,
    validateCode,

    // 提取身份证信息
    getBirthday,
    getGender,

    // 掩码
    maskCardNo,
    maskPhone,
    maskName,

    // 参数处理
    param,
    parseParam,
    tryMergeQrParam,
    appendParam,

    // 保存图片
    saveImageToPhotosAlbum,

    // 其他辅助方法
    merge,
    isObject,
    isString,
    isFunc,
    getCurrentPage,
};

function saveImageToPhotosAlbum(path) {

    if (!wx.saveImageToPhotosAlbum) {
        getApp().showError('先升级下微信版本，再来点我哦！', 3);
        return;
    }

    wx.saveImageToPhotosAlbum({
        filePath: path,
        success(res) {
            var app = getApp();
            if (/ios/i.test(app.OS.system)) {
                app.showToast('已保存');
            }
        },
        fail(res) {
            if (res.errMsg.indexOf('auth') != -1) {
                wx.showModal({
                    title: '授权保存图片',
                    content: '请在“设置”中打开“保存到相册”授权，您就可以保存图片了',
                    confirmText: '去设置',
                    success(res) {
                        if (res.confirm) {
                            wx.openSetting();
                        }
                    }
                });
            }
        }
    });
}

function during(start, end, now) {

    start = this.normalizeDate(start);
    end = this.normalizeDate(end);

    var ret = true, now = now || Date.now();
    if (start && now <= start) {
        ret = false;
    }

    if (end && now >= end) {
        ret = false;
    }

    return ret;
}

function addDay(date, days) {

    date = this.normalizeDate(date);
    if (date) {
        return new Date(date.setDate(date.getDate() + days))
    }
}

function addMonth(date, count) {

    date = this.normalizeDate(date);
    if (date) {
        return new Date(date.setMonth(date.getMonth() + count))
    }
}

function dateDiff(date1, date2) {

    date1 = this.normalizeDate(date1);
    date2 = this.normalizeDate(date2);

    if (date1 && date2) {
        return Math.round((date2 - date1) / 1000 / 60 / 60 / 24 * 100) / 100
    }
}

function normalizeDate(date) {

    if (typeof date === 'string') {
        date = date.replace(/-/g, '/');
        date = new Date(date);
    }

    if (!(date instanceof Date)) {
        date = new Date(date);
    }

    if (date.toString() == 'Invalid Date') {
        return ''
    }

    return date;
}

function getWeekday(date) {

    var weekday = [
        "星期天",
        "星期一",
        "星期二",
        "星期三",
        "星期四",
        "星期五",
        "星期六"
    ];

    return weekday[date.getDay()];
}

function param(obj, encode) {

    if (!isObject(obj)) {
        return '';
    }

    return Object.keys(obj).map(key => {
        var val = obj[key] + '';
        if (val.length === 0 || val === 'null' || val === 'undefined' || val === 'NaN') {
            val = '';
        }
        else if (encode !== false) {
            val = encodeURIComponent(val);
        }
        return key + '=' + val
    }).join('&')
}

function parseParam(paramStr, delimiter = '&', spliter = '=') {

    let arr = paramStr.split(delimiter),
        obj = {};

    arr.length && arr.forEach(item => {

        let tempArr = item.split(spliter);
        if (tempArr[0]){

            obj[tempArr[0]] = tempArr[1];
        }
    });

    return obj;
}

function tryMergeQrParam(target, scene) {

    let params;

    if (scene && typeof scene === 'string') {

        scene = decodeURIComponent(scene);

        if (scene.indexOf('$') != -1) {
            params = this.parseParam(scene, '$', '=');
        }
        else if (scene.indexOf('!') != -1) {
            params = this.parseParam(scene, '!', '~');
        }

        params && this.merge(target, params);
    }

    return params
}

function appendParam(path, param) {

    if (path && param) {

        path += path.indexOf('?') == -1 ? '?' : '&';
        path += this.param(param);
    }

    return path;
}

function formatTime(date) {

    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();

    var hour = date.getHours();
    var minute = date.getMinutes();
    var second = date.getSeconds();

    return [year, month, day].map(formatNumber).join('/') + ' ' + [hour, minute, second].map(formatNumber).join(':')
}

function formatDate(date, fmt) {

    date = this.normalizeDate(date);
    if (!date) {
        return ''
    }

    if (!fmt) {
        fmt = 'yyyy-MM-dd';
    }

    var o = {
        "M+": date.getMonth() + 1, //月份
        "d+": date.getDate(), //日
        "h+": date.getHours(), //小时
        "m+": date.getMinutes(), //分
        "s+": date.getSeconds(), //秒
        "q+": Math.floor((date.getMonth() + 3) / 3), //季度
        "S": date.getMilliseconds() //毫秒
    };

    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));

    return fmt;
}

function formatNumber(n) {

    n = n.toString();
    return n[1] ? n : '0' + n
}

function validateIdCardNo(num) {

    var error = {
        code: 1,
        msg: '请输入身份证号'
    };

    if (!num) {
        return error;
    }

    error.code = 2;
    error.msg = '身份证号格式不正确';

    //身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X。   
    if (!(/^\d{17}([0-9]|X)$/.test(num))) {
        return error;
    }

    //校验位按照ISO 7064:1983.MOD 11-2的规定生成，X可以认为是数字10。 
    //下面分别分析出生日期和校验位 
    var re = new RegExp(/^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$/);
    var arrSplit = num.match(re);

    //检查生日日期是否正确 
    var dtmBirth = new Date(arrSplit[2] + "/" + arrSplit[3] + "/" + arrSplit[4]);
    if ('Invalid Date' != dtmBirth) {

        //检验18位身份证的校验码是否正确。 
        //校验位按照ISO 7064:1983.MOD 11-2的规定生成，X可以认为是数字10。 
        var valnum;
        var arrInt = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
        var arrCh = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];
        var nTemp = 0,
            i;
        for (i = 0; i < 17; i++) {
            nTemp += num.substr(i, 1) * arrInt[i];
        }
        valnum = arrCh[nTemp % 11];
        if (valnum == num.substr(17, 1)) {
            error.code = 0;
            error.msg = '';
        }
    }

    return error;
}

function validateEmail(email) {

    var error = {
        code: 0,
        msg: ''
    };

    if (!email) {
        error.code = 1;
        error.msg = '请输入邮箱';
    }
    else if (!/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(email)) {
        error.code = 2;
        error.msg = '输入的邮箱格式不正确';
    }

    return error;
}

function validatePhone(phone) {

    var error = {
        code: 0,
        msg: ''
    };

    if (!phone) {
        error.code = 1;
        error.msg = '请输入手机号码';
        return error;
    }

    if (!(/^1(3|4|5|7|8)\d{9}$/.test(phone))) {
        error.code = 2;
        error.msg = '手机号码格式不正确';
    }

    return error;
}

function validateFlight(value, flightType) {

    var error = {
        code: 0,
        msg: ''
    };

    var reg = /^(9C|AQ)/i, notSupportErr = '暂不支持春秋航空/九元航空/国际或港澳台航班投保';
    if (flightType == 'internation') {
        reg = /^(OX)/i;
        notSupportErr = '暂不支持泰国东方航空航班、国内航班';
    }

    if (!value) {
        error.code = 1;
        error.msg = '请输入航班号';
    }
    else if (reg.test(value)) {
        error.code = 2;
        error.msg = notSupportErr;
    }
    else if (!/^[a-z0-9]+$/i.test(value) || !/[a-z]+/i.test(value) || !/[0-9]+/.test(value)) {
        error.code = 3;
        error.msg = '该航班号不存在';
    }

    return error;
}

function validateCode(value) {

    var error = {
        code: 0,
        msg: ''
    };

    if (!value) {
        error.code = 1;
        error.msg = '请输入验证码';
        return error;
    }

    if (!(/^\d{4}$/.test(value))) {
        error.code = 2;
        error.msg = '呀~手滑？验证码错误哦';
    }

    return error;
}

function isObject(target) {
    return Object.prototype.toString.call(target) === '[object Object]'
}

function isString(target) {
    return typeof target === 'string'
}

function isFunc(target) {
    return typeof target === 'function'
}

function getCurrentPage() {
    let pages = getCurrentPages();
    return pages[pages.length - 1];
}

// 合并两个对象
function merge(target, src, deep) {

    if (!target || !src) return target;

    for (var key in src) {

        if (deep !== false && isObject(target[key]) && isObject(src[key])) {
            merge(target[key], src[key]);
        }
        else {
            target[key] = src[key];
        }
    }

    return target;
}

function getBirthday(code) {

    var birthday = "", code = code || '';

    if (code.length == 15) {
        birthday = "19" + code.substr(6, 6);
    } else if (code.length == 18) {
        birthday = code.substr(6, 8);
    }

    if (birthday) {
        birthday = birthday.replace(/(.{4})(.{2})/, "$1/$2/");
    }

    return birthday
}

function getGender(code) {

    var gender = '', code = code || '';
    if (code.length == 15) {
        gender = code.substr(14, 1);
    }
    else if (code.length == 18) {
        gender = code.substr(16, 1);
    }

    if (gender) {
        if (+gender % 2 == 1) {
            gender = 'M';
        }
        else {
            gender = 'F';
        }
    }

    return gender;
}

function maskCardNo(cardno, cardtype) {

    if (!cardno) return '';

    var cardtype = cardtype || 'I';
    if (cardtype == 'P') {
        cardno = cardno.substr(0, 4) + '*****';
    }
    else if (cardtype == 'I') {
        if (cardno.length == 15) {
            cardno = cardno.substr(0, 3) + '***********' + cardno.substr(14, 1);
        }
        else {
            cardno = cardno.substr(0, 3) + '**************' + cardno.substr(17, 1);
        }
    }

    return cardno;
}

function maskPhone(phone) {

    if (!phone) return '';
    return phone.replace(/(\d{3})\d{4}(\d{4})/, '$1****$2');
}

function maskName(name) {

    if (!name) return '';
    if (name.length > 2) {

        var starStr = '';
        for (var i = 0; i < name.length - 2; i++) {
            starStr += '*';
        }
        return name.substr(0, 1) + starStr + name.substring(name.length - 1);
    } else if (name.length == 2) {

        return name.substr(0, 1) + '*';
    }

    return name;
}

function User(option = {}) {

    if (!option.loginOptions || !option.loginOptions.url) {

        console.error('at User: loginOption/loginOption.url is required!');
        return;
    }

    const STORE_SESSION_KEY = 'session';

    const UserData = {
        userInfo: {},
        sessionKey: '',
        extraInfo: {
            openUserId: 0,
            containsUnionId: false
        }
    };

    try {
        var value = wx.getStorageSync(STORE_SESSION_KEY);
        value && Util.merge(UserData, value);
    } catch (e) { }

    return {

        _logining_request: null,
        _config: option,

        STORE_SESSION_KEY,

        UserData,
        login,
        doLogin,
        doLoginRequest
    }

    function login() {

        return WxProxy.checkSession().then(res => {

            return UserData.sessionKey ? UserData : this.doLogin()
        }).catch(res => {

            return this.doLogin()
        })
    }

    function doLogin() {

        // handle concurrent login request;
        if (this._logining_request) {

            return this._logining_request
        }

        return this._logining_request = WxProxy.login().then(logininfo => {

            if (logininfo.code) {

                return WxProxy.getUserInfo({
                    withCredentials: true,
                    lang: 'zh_CN'
                }).then(userInfo => {

                    UserData.userInfo = userInfo.userInfo;

                    return {
                        encryptedData: userInfo.encryptedData,
                        iv: userInfo.iv
                    }
                }).catch(res => {

                    // This catch clause must be reserved even if you removed the following line!;
                    console.log('用户未授权获取信息');
                    // and this error should not be thrown upwards!
                }).then(encryptInfo => {

                    return this.doLoginRequest(logininfo.code, encryptInfo)
                })
            } else {

                var msg = 'wx.login invalid code - ' + JSON.stringify(logininfo);
                console.error(msg);

                return Promise.reject(msg)
            }
        }).catch(error => {

            // reset value so that another login request can step in
            this._logining_request = null;

            if (error.code == 'wxfail'){

                var msg = 'wx.login failed - ' + JSON.stringify(error);
                console.error(msg);

                error = msg;
            }

            return Promise.reject(error)
        }).then(UserData => {

            this._logining_request = null;
            return UserData;
        })
    }

    function doLoginRequest(code, encryptInfo = {}) {

        Util.merge(this._config.loginOptions, {
            data: {
                loginCode: code,
                userInfo: UserData.userInfo,
                encryptedData: encryptInfo.encryptedData || '',
                iv: encryptInfo.iv || ''
            }
        });

        return WxProxy.request(this._config.loginOptions).then(sessionInfo => {

            var filteredInfo = this._config.loginOptions.filter(sessionInfo) || {};

            var sessionData = filteredInfo.data;
            if (sessionData.success && sessionData.value) {

                UserData.sessionKey = sessionData.value;

                if (sessionData.extraInfo) {
                    UserData.extraInfo = sessionData.extraInfo;
                }

                wx.setStorage({
                    key: STORE_SESSION_KEY,
                    data: UserData
                });

                return UserData;
            }
            else {

                var msg = 'doLoginRequest failed - ';
                console.error(msg, sessionInfo.errorMsg);

                return Promise.reject({
                    summary: msg,
                    option: this._config.loginOptions,
                    response: sessionInfo.errorMsg
                })
            }
        })
    }
}

function logger(options = {}) {

    return {

        scopeName: options.scopeName + '-',
        info,
        error,
        scriptError,
        test,

        _OSInfo: '',
        _logger,
        _newLine: '<br>\r\n'
    }

    function scriptError() {

        this._logger('ERROR', arguments, 'script');
    }

    function error() {

        this._logger('ERROR', arguments);
    }

    function info() {

        this._logger('INFO', arguments);
    }

    function test() {

        var arr = Array.from(arguments);
        arr.unshift('【测试ERROR，请自动忽略】');

        this._logger('ERROR', arr);
    }

    function _logger(level, msgArr, err_type) {
        
        try {

            var app = getApp();
            if (!app || app.OS.platform == "devtools") return;

            var arr = Array.from(msgArr);

            arr.unshift(this.scopeName, {
                AppVersion: app.config.version,
                UID: app.User.extraInfo.openUserId
            }, this._newLine);

            if (err_type == 'script') {

                if (!this._OSInfo) {
                    this._OSInfo = JSON.stringify(app.OS);
                }

                arr.push(this._newLine, this._OSInfo);
            }

            var pages = getCurrentPages();
            if (pages && pages.length) {

                var currPage = pages.reverse()[0];
                arr.push(this._newLine, 
                    '当前页面：', 
                    currPage.route, 
                    this._newLine, 
                    '页面入参：', 
                    currPage.options);
            }

            var message = arr.map(item => {
                return typeof item != 'string' ? JSON.stringify(item) : item;
            }).join('');

            wx.request({
                url: 'https://tac-gw-api.zhongan.com/logRecord/print',
                method: 'POST',
                data: {
                    level,
                    message
                }
            });

        } catch (e) { }
    }

    return logger;
}

function AppBase(config = {}) {

    console.info('AppVersion: ' + config.version);

    const Log = logger({
        scopeName: '【' + config.appDesc + config.env.toUpperCase() + '】'
    });

    const OS = (function () {
        try { return wx.getSystemInfoSync() || {} } catch (e) { return {} }
    })();

    // global handler for promise error
    Promise.prototype.__catch = Promise.prototype.catch;
    Promise.prototype.catch = function (callback) {

        return this.__catch(function (error = {}) {

            if (error instanceof Error) {
                // avoid duplication
                if (!error.__logged2server){
                    // flag it
                    error.__logged2server = true;
                    Log.scriptError(error);
                }
            }

            return callback(error)
        })
    };

    return {

        __request_counter: 0,
        __user: {}, // initialized in onLaunch phases

        wx: WxProxy, 
        config,
        launchInfo: {
            query: {}
        },

        Util, Log, OS,

        User: {},

        onLaunch,
        onShow,
        onError,

        // overridable
        onBeforeLaunch,
        onBeforeShow: onBeforeLaunch,
        onGetLoginOptions,

        login, 
        doLogin,

        doRequest,
        request,
        ajax: request,

        showError,
        showToast,

        showPageLoading,
        hidePageLoading,

        showLoading,
        hideLoading: wx.hideLoading.bind(wx),

        postMessage,
        extend
    }

    function extend(childMemners) {

        this.__onLaunch = childMemners.onLaunch;
        this.__onShow = childMemners.onShow;
        this.__onError = childMemners.onError;

        delete childMemners.onLaunch;
        delete childMemners.onShow;
        delete childMemners.onError;

        return Util.merge(this, childMemners);
    }

    function onLaunch(options) {

        // {"path":"pages/index/index","scene":1001,"query":{}}

        // 老版本query可能为空
        if (!options.query) {
            options.query = {};
        }
        
        // 对参数进行预处理
        this.onBeforeLaunch(options);

        this.launchInfo = options;
        // 自定义场景
        this.launchInfo.subscene = options.query.scene || '';

        console.log('App.onLaunch：');
        console.log(this.launchInfo);

        var loginOptions = this.onGetLoginOptions();
        this.__user = User({ loginOptions });

        Object.defineProperty(this, 'User', {
            get(){
                return this.__user.UserData
            }
        });

        this.__onLaunch(options);
    }

    function onShow(options){

        this.onBeforeShow(options);
        
        this.launchInfo.subscene = options.query.scene || '';

        console.log('App.onShow：');
        console.log(this.launchInfo);

        this.__onShow(options);
    }

    function onError(msg){

        if (this.config.env != 'prd') {

            this.showError(msg.substr(0, 200), 3);
        }

        this.Log.scriptError(msg);

        if (Util.isFunc(this.__onError)){

            this.__onError(msg);
        }
    }

    function onBeforeLaunch(options){

        var qrParams = Util.tryMergeQrParam(options.query, options.query.scene);
        if (qrParams && !qrParams.scene) {
            // delete scene since it has been parsed;
            delete options.query.scene;
        }
    }

    function onGetLoginOptions(options){

        return {
            url: this.config.apiBase + '?serviceName=SalesWeChatAppAuthLogin&serviceVersion=1.0.0',
            data: {
                activityChannel: this.config.activityChannel,
                activityScene: {
                    scene: this.launchInfo.scene,
                    subscene: this.launchInfo.subscene
                }
            },
            // 对结果进行处理， 通常是做字段map
            filter: res => res,
            method: 'POST'
        }
    }

    function postMessage(source, data) {

        getCurrentPages().reverse.map(page => {

            if (typeof page.onMessage === 'function') {
                
                page.onMessage(source, data);
            }
        });
    }

    /* === login === */

    // login from cache first
    function login() {

        return this.__user.login().catch(handleLoginError.bind(this))
    }

    // force login
    function doLogin() {

        return this.__user.doLogin().catch(handleLoginError.bind(this))
    }

    function handleLoginError(error) {

        this.showError('登录失败');

        if (error instanceof Error) {
            Log.error(error);
        }

        return Promise.reject(error);
    }

    /* ===  UI === */

    function showTip(tip_type, msg, interval, callback) {

        let currPage = Util.getCurrentPage();

        if (currPage) {

            let option = {};
            let timerKey = '_timer_' + tip_type;

            option[tip_type] = {
                hidden: false,
                msg: msg
            };

            currPage.setData(option);

            if (this[timerKey]) {
                clearTimeout(this[timerKey]);
            }

            this[timerKey] = setTimeout(function () {
                option[tip_type].hidden = true;
                currPage.setData(option);
                callback && callback();
            }, (interval || 1.5) * 1000);
        }
    }

    function showError(msg, interval, callback) {
        showTip.call(this, 'ui_toptip', msg, interval, callback);
    }

    function showToast(msg, interval, callback) {
        showTip.call(this, 'ui_toast', msg, interval, callback);
    }

    function showPageLoading() {
        var page = Util.getCurrentPage();
        page && page.setData({
            ui_pageloading: {
                hidden: false
            }
        });
    }

    function hidePageLoading() {
        var page = Util.getCurrentPage();
        page && page.setData({
            ui_pageloading: {
                hidden: true
            }
        });
    }

    function showLoading(option = {}) {
        wx.showLoading(Util.merge({
            title: '加载中...',
            mask: true
        }, option));
    }

    /* === Api request === */

    function request(option, suppressTip) {

        return this.login().then(userData => {

            option.header = {
                'Session-Key': userData.sessionKey
            };

            return this.doRequest(option, suppressTip)
        }).catch(error => {

            if (error.statusCode == 403) {

                return this.doLogin().then(userData => {

                    option.header['Session-Key'] = userData.sessionKey;
                    return this.doRequest(option, suppressTip);
                })
            }

            return Promise.reject(error)
        })
    }

    // 无须登录接口请求
    function doRequest(option, suppressTip){

        if (!option.url) {

            option.url = this.config.apiBase + '?serviceName=' + option.serviceName
                + '&serviceVersion=' + (option.serviceVersion || '1.0.0');
        }

        if (!option.method) {

            option.method = 'POST';
        }

        var request_counter = ++this.__request_counter;

        console.log('【' + request_counter + '】开始请求接口:', option.serviceName || option.url);
        console.log('携带参数:', option.data);

        return WxProxy.request(option).then(res => {

            console.log('【' + request_counter + '】接口返回', res);

            switch (res.statusCode){

                case 200:
                    return res.data
                case 403:
                    return Promise.reject(res)
            }

            // 出错了
            if (suppressTip !== true) {
                this.showError('出错了，请稍后再试！');
            }

            var msg = "接口请求失败 - statusCode: " + res.statusCode;

            console.error(msg, ' data:', option, ' response:', res);

            this.Log.error({
                summary: msg,
                option,
                response: res
            });
            
            return Promise.reject(res)
        })
    }
}

function PageBase() {

    const app = getApp();
    const Util = app.Util;

    // jump_to 页面跳转传值
    let __page_data = null;

    return {

        onReachBottom() { },

        data: {
            ui_pageloading: {
                hide: false
            }
        },

        // tap to copy event handler
        tap_copy,
        // setData event handler
        set_data,
        // make a phone call event handler 
        call_phone,
        // jump to the 3td mini program event handler
        nav_to_mini,

        onBeforeLoad,
        onLoad,
        onShow,
        onReady,

        nav_to,
        nav_back,

        switch_tab,
        report_formid,

        open_epolicy,
        open_file(e) {
            app.openFile(app.config.cdnBase + e.currentTarget.dataset.url);
        },

        extend
    }

    function extend(childMembers) {

        var p = Util.merge({}, this);

        // 接管子页面的部分生命周期函数
        p.__onLoad = childMembers.onLoad;
        p.__onShow = childMembers.onShow;
        p.__onReady = childMembers.onReady;

        delete childMembers.onLoad;
        delete childMembers.onShow;
        delete childMembers.onReady;

        Util.merge(p, childMembers);

        if (p.page_loading === true) {
            p.data.ui_pageloading.hidden = true;
        }

        return p;
    }

    function onBeforeLoad(options) {

        var qrParams = Util.tryMergeQrParam(options, options.scene);
        if (qrParams && !qrParams.scene) {
            // delete scene since it has been parsed;
            delete options.scene;
        }
    }

    function onLoad(options) {

        this.onBeforeLoad(options);
        
        this.options = options;

        // 注入jump_to传递的数据
        if (__page_data !== null) {
            this.options.__page_data = __page_data;
            __page_data = null;
        }

        console.log(this.route, '页面入参:');
        console.log(this.options);

        if (typeof this.__onLoad === 'function') {
            this.__onLoad(this.options);
        }
    }

    function onShow() {

        if (typeof this.__onShow === 'function') {

            var data = {};
            if (__page_data !== null) {
                data.__page_data = __page_data;
                __page_data = null;
            }

            this.__onShow(data);
        }
    }

    function onReady() {

        if (typeof this.__onReady === 'function') {
            this.__onReady.apply(this, arguments);
        }

        wx.showShareMenu && wx.showShareMenu({
            withShareTicket: true
        });

        if (this.route !== 'pages/index/index') {

            this.setData({
                mod_contactus_show: isOffwork()
            });
        }
    }

    function isOffwork() {

        var date = new Date();

        var d = date.getDay();

        var start = new Date(Util.formatDate(date, 'yyyy/MM/dd 09:00:00'));
        var end = new Date(Util.formatDate(date, 'yyyy/MM/dd 18:00:00'));

        return date > start && date < end && d >= 1 && d <= 5
    }

    function set_data(e) {

        var ds = e.currentTarget.dataset;
        if (ds.prop) {

            if (ds.prop.indexOf(',') == -1) {

                this.setData({
                    [ds.prop]: ds.val
                });
            }
            else {

                // 多属性设值
                var props = ds.prop.split(',');
                var vals = ds.val.split(',');
                var obj = {};
                for (var i = 0; i < props.length; i++) {
                    obj[props[i]] = vals[i];
                }

                this.setData(obj);
            }
        }
    }

    function call_phone(e) {

        var ds = e.currentTarget.dataset;
        wx.makePhoneCall({
            phoneNumber: ds.phone || '1010-9955'
        });
    }

    function nav_to(e, replace, data) {

        var url = e;
        if (e.currentTarget) {
            
            var ds = e.currentTarget.dataset;

            url = ds.url;
            replace = ds.replace === '1';
            data = ds.pagedata;
        }

        if (url.startsWith('pages')) {
            url = '/' + url;
        }

        var pages = getCurrentPages().reverse(),
            urlRoute = url.split('?')[0],
            index = pages.findIndex(item => '/' + item.route === urlRoute);

        if (typeof data != 'undefined') {
            __page_data = data;
        }

        if (index == -1) {

            if (replace === true) {
                wx.redirectTo({ url });
            }
            else {
                wx.navigateTo({ url });
            }
        }
        else {
            wx.navigateBack({
                delta: index
            });
        }
    }

    function nav_back(e, delt, data){

        if (e.currentTarget) {

            var ds = e.currentTarget.dataset;

            delt = +ds.delt;
            data = ds.pagedata;
        }
        else{

            delt = e;
            data = delt;
        }

        if (typeof data != 'undefined') {
            __page_data = data;
        }

        wx.navigateBack({
            delta: delt || 1
        });
    }

    function switch_tab(e, data) {

        var url = e;
        if (e.currentTarget) {

            // 来自点击事件
            var ds = e.currentTarget.dataset;

            url = ds.url;
            data = data.pagedata;
        }

        if (typeof data != 'undefined') {
            __page_data = data;
        }

        wx.switchTab({ url });
    }

    function tap_copy(e) {

        var data = e.target.dataset.copy;
        wx.setClipboardData({
            data: data,
            success: function (res) {
                wx.showToast({
                    title: '复制成功',
                    icon: 'success',
                    duration: 1000
                });
            }
        });
    }

    function nav_to_mini(e, data) {

        var ds = data || e.currentTarget.dataset;
        if (ds.appid) {

            if (!wx.navigateToMiniProgram) {
                app.showError('先升级下微信版本，再来点我哦！', 3);
                return;
            }

            var envVersions = {
                'prd': 'release',
                'uat': 'trial',
                'test': 'develop'
            };

            if (ds.extraData && typeof ds.extraData === 'string') {

                try {
                    ds.extraData = JSON.parse(ds.extraData);
                } catch (e) {
                    console.error('navigateToMiniProgram: extraData传参有误');
                }
            }

            wx.navigateToMiniProgram({
                appId: ds.appid,
                path: ds.path,
                envVersion: envVersions[app.config.env],
                extraData: ds.extraData
            });
        }
    }

    function open_epolicy(e) {

        var url = e.target.dataset.contracturl;
        app.openFile(url, function (res) {
            if (res.statusCode == 301) {
                app.showError('超过每日最大下载次数（20次），请明天再来下载哦');
                return false
            }
        });
    }

    function report_formid(e, data) {

        if (!e || e.type !== 'submit' || e.__formid_handled === true) return;

        e.__formid_handled = true;

        var ds = e.detail.target.dataset, reportData = {
            activityChannel: app.config.activityChannel,
            formId: e.detail.formId,
            // extraInfo: {
            //     phone: e.detail.value.phone
            // },
            formType: 1,
            formSourceType: ds.formsource || ds.nwname,
            totalMessageCount: 1
        };

        data && Util.merge(reportData, data);

        if (!reportData.formSourceType) {
            console.warn('缺少 data-formsource 或 data-nwname');
        }

        if (reportData.formId == 'the formId is a mock one') {
            return;
        }

        if (reportData.extraInfo) {
            reportData.extraInfo = JSON.stringify(reportData.extraInfo);
        }

        app.request({
            serviceName: 'za.sales.weChatApp.userFormId.create',
            method: 'POST',
            data: reportData
        });
    }
}

var form = {};

exports.AppBase = AppBase;
exports.PageBase = PageBase;
exports.Form = form;
